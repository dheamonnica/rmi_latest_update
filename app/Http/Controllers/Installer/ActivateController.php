<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-02-26 06:11:06              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer; use Exception; use Illuminate\Http\Request; use Illuminate\Routing\Controller; use Illuminate\Support\Facades\DB; class ActivateController extends Controller { public function activate() { if ($this->checkDatabaseConnection()) { goto dOoYM; } return redirect()->back()->withErrors(["\x64\141\164\141\x62\141\x73\x65\137\143\157\156\156\145\x63\164\x69\x6f\x6e" => trans("\151\x6e\x73\x74\141\x6c\154\x65\x72\x5f\155\145\x73\x73\141\x67\145\x73\x2e\145\156\166\x69\162\x6f\156\x6d\145\156\164\56\167\x69\172\x61\162\x64\56\146\157\162\x6d\x2e\x64\142\137\x63\157\156\x6e\x65\x63\164\151\157\x6e\137\146\141\x69\154\145\x64")]); dOoYM: return view("\151\156\x73\x74\141\x6c\x6c\145\x72\56\x61\143\x74\151\166\141\x74\x65"); } public function verify(Request $request) { $mysqli_connection = getMysqliConnection(); if ($mysqli_connection) { goto d3fZr; } return redirect()->route("\x49\156\x73\x74\x61\154\154\145\162\56\141\143\164\x69\166\141\x74\x65")->with(["\x66\x61\151\x6c\x65\x64" => trans("\162\145\163\x70\x6f\156\x73\x65\x73\x2e\144\x61\164\x61\142\x61\163\145\137\143\157\156\x6e\x65\x63\164\x69\x6f\x6e\137\x66\141\x69\154\x65\x64")])->withInput($request->all()); d3fZr: $purchase_verification = aplVerifyEnvatoPurchase($request->purchase_code); if (empty($purchase_verification)) { goto mB20F; } return redirect()->route("\111\x6e\x73\x74\x61\x6c\154\x65\162\56\141\x63\x74\151\166\x61\164\x65")->with(["\146\141\151\x6c\145\144" => "\103\157\156\x6e\x65\x63\x74\x69\x6f\x6e" . "\40\164\157\x20\162\x65\155\x6f\x74\145\x20" . "\x73\x65\x72\x76\145\162\x20\143\x61\x6e\47\164\x20\142\x65" . "\40\145\x73\x74\141\142\x6c\x69\x73\150\x65\x64"])->withInput($request->all()); mB20F: $license_notifications_array = incevioVerify($request->root_url, $request->email_address, $request->purchase_code, $mysqli_connection); if (!($license_notifications_array["\156\x6f\164\151\146\x69\x63\x61\x74\x69\x6f\x6e\137\143\141\163\145"] == "\156\x6f\x74\x69\146\x69\143\141\164\151\157\156\137\154\151\x63\145\156\x73\x65\137\157\x6b")) { goto KDtiJ; } return view("\x69\x6e\163\164\141\154\154\145\x72\x2e\151\156\x73\x74\x61\x6c\x6c", compact("\154\x69\x63\x65\156\163\x65\x5f\156\157\x74\x69\x66\151\143\x61\164\151\157\156\x73\x5f\x61\162\162\x61\x79")); KDtiJ: if (!($license_notifications_array["\x6e\x6f\164\x69\146\x69\143\141\164\151\x6f\156\x5f\143\141\163\145"] == "\156\x6f\x74\151\x66\151\143\x61\164\x69\x6f\x6e\x5f\141\154\162\145\x61\144\x79\x5f\x69\156\163\x74\x61\154\x6c\145\x64")) { goto E9Xmi; } $license_notifications_array = incevioAutoloadHelpers($mysqli_connection, 1); if (!($license_notifications_array["\x6e\157\164\x69\x66\x69\143\141\164\x69\157\x6e\x5f\143\141\x73\x65"] == "\156\157\164\x69\146\151\143\x61\x74\151\157\156\137\154\151\143\145\156\163\x65\x5f\x6f\x6b")) { goto MlZFo; } return view("\151\156\163\164\141\x6c\154\x65\162\56\151\x6e\x73\164\141\x6c\x6c", compact("\154\x69\x63\145\x6e\x73\x65\x5f\156\x6f\x74\x69\146\151\143\141\164\151\157\156\163\x5f\141\162\x72\x61\171")); MlZFo: E9Xmi: return redirect()->route("\111\156\163\x74\x61\154\x6c\x65\162\56\141\143\x74\151\x76\x61\164\x65")->with(["\146\141\x69\x6c\145\x64" => $license_notifications_array["\x6e\157\x74\x69\146\151\x63\141\164\151\157\156\x5f\164\x65\x78\164"]])->withInput($request->all()); } private function checkDatabaseConnection() { try { DB::connection()->getPdo(); return true; } catch (Exception $e) { return false; } } private function response($message, $status = "\x64\141\156\147\x65\x72") { return ["\163\164\141\164\165\163" => $status, "\155\145\x73\163\141\x67\x65" => $message]; } }
